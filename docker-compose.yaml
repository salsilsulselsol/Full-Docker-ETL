x-airflow-common: &airflow-common
  image: idx_etl_custom_airflow:latest 
  build:
    context: . 
    dockerfile: Dockerfile # Menggunakan Dockerfile di root project untuk image Airflow
    no_cache: true
  environment:
    &airflow-common-env
    AIRFLOW_UID: '50000' # Sesuaikan jika perlu, terutama di Linux
    AIRFLOW_GID: '0'     # Grup root, umumnya aman
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__ENABLE_XCOM_PICKLING: 'true'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_db/airflow
    AIRFLOW__WEBSERVER__SECRET_KEY: 'ganti_dengan_kunci_rahasia_anda_yang_sangat_aman_sekali!' # !! GANTI INI !!
    AIRFLOW_CONN_MONGO_DEFAULT: 'mongodb://mongo_db:27017/' # Nama service MongoDB
  volumes:
    - ./airflow/dags:/opt/airflow/dags:ro # Path ke direktori DAGs Anda
    - ./airflow/logs:/opt/airflow/logs    # Path untuk logs Airflow
    - ./airflow/plugins:/opt/airflow/plugins:ro # Path ke plugins kustom
    - ./airflow/data:/opt/airflow/data     # Path untuk data jika dibutuhkan oleh DAGs
    - /var/run/docker.sock:/var/run/docker.sock # Untuk DockerOperator
  user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
  networks:
    - etl_network # Semua layanan akan menggunakan network ini

services:
  postgres_db: 
    image: postgres:15
    container_name: project_postgres_db
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    volumes:
      - postgres_db_volume:/var/lib/postgresql/data
    ports:
      - "5433:5432" # Port host:container (ubah 5433 jika sudah terpakai)
    networks:
      - etl_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  airflow-init:
    <<: *airflow-common
    container_name: project_airflow_init
    depends_on:
      postgres_db: 
        condition: service_healthy
    entrypoint: /bin/bash
    command:
      - -c
      - |
        set -e; \
        airflow db init; \
        airflow users create \
          --username admin \
          --firstname Admin \
          --lastname User \
          --role Admin \
          --email admin@example.com \
          --password admin; \
        echo "Airflow initialization complete.";
    # Service ini hanya berjalan sekali

  airflow-webserver:
    <<: *airflow-common
    container_name: project_airflow_webserver
    command: airflow webserver
    ports:
      - "8081:8080" # Akses Airflow UI di http://localhost:8081
    depends_on:
      postgres_db: 
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  airflow-scheduler:
    <<: *airflow-common
    container_name: project_airflow_scheduler
    command: airflow scheduler
    depends_on:
      postgres_db: 
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname \"$${HOSTNAME}\" --limit 1 || exit 1"]
      interval: 60s
      timeout: 30s
      retries: 5
    restart: unless-stopped

  mongo_db: 
    image: mongo:6.0
    container_name: project_mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_db_volume:/data/db
    networks:
      - etl_network
    restart: unless-stopped

  # Builder services untuk image ETL
  idx_extractor_builder:
    build:
      context: ./airflow/dags/idx/extractor # Path ke Dockerfile ekstraksi IDX
      dockerfile: Dockerfile
    image: idx_etl_extractor_custom:latest # Nama image yang akan digunakan oleh DockerOperator
    container_name: project_idx_extractor_builder
    networks: 
      - etl_network

  idx_transformer_builder:
    build:
      context: ./airflow/dags/idx/transformer # Path ke Dockerfile transformasi IDX
      dockerfile: Dockerfile
    image: idx_etl_transformer_custom:latest # Nama image yang akan digunakan oleh DockerOperator
    container_name: project_idx_transformer_builder
    networks:
      - etl_network

  # Layanan API Anda (sesuaikan jika perlu)
#   api_service: 
#     build:
#       context: ./api 
#       dockerfile: Dockerfile
#     container_name: project_api_service
#     ports:
#       - "5000:5000" 
#     volumes:
#       - ./api:/app # Sesuaikan path source code API Anda
#     networks:
#       - etl_network
#     restart: unless-stopped

#   # Layanan Laravel Anda (sesuaikan jika perlu)
#   laravel_php: 
#     build:
#       context: ./laravel 
#       dockerfile: Dockerfile.php 
#     container_name: project_laravel_php
#     volumes:
#       - ./laravel:/var/www/html 
#     networks:
#       - etl_network
#     depends_on:
#       - mongo_db 
#     restart: unless-stopped

#   laravel_nginx: 
#     build:
#       context: ./laravel 
#       dockerfile: Dockerfile.nginx 
#     container_name: project_laravel_nginx
#     ports:
#       - "8000:80" # Akses Laravel di http://localhost:8000
#     volumes:
#       - ./laravel:/var/www/html 
#       - ./laravel/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Pastikan file ini ada
#     depends_on:
#       - laravel_php 
#     networks:
#       - etl_network
#     restart: unless-stopped

volumes:
  postgres_db_volume:
  mongo_db_volume:

networks:
  etl_network:
    driver: bridge
    name: project_etl_network # Nama network kustom yang eksplisit