version: '3.8'

services:
  # PostgreSQL untuk metadata Airflow
  postgres:
    image: postgres:13
    container_name: postgres-airflow
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
      # Performance tuning
      POSTGRES_SHARED_PRELOAD_LIBRARIES: pg_stat_statements
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow-network
    # Resource limits untuk stability
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis sebagai message broker Celery Airflow
  redis:
    image: redis:latest
    container_name: redis-airflow
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - airflow-network
    # Redis configuration untuk stability
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-webserver
    command: webserver
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: "postgresql+psycopg2://airflow:airflow@postgres/airflow"
      AIRFLOW__CELERY__RESULT_BACKEND: "db+postgresql://airflow:airflow@postgres/airflow"
      AIRFLOW__CELERY__BROKER_URL: "redis://:@redis:6379/0"
      AIRFLOW__WEBSERVER__SECRET_KEY: 'f3b1a2c5d8e7f94b6c3a9d1e7f8b0c3d'
      AIRFLOW__CORE__FERNET_KEY: 'z3BMGxVHz2tJq64TyW5guXw_T3OgMFTdQ9v_3XnZiwE='
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      # Rate limiting menggunakan Redis
      AIRFLOW__WEBSERVER__RATE_LIMITER_STORAGE_URI: "redis://redis:6379/1"
      # Database connection pool settings
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 5
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: 3600
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 10
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/data:/opt/airflow/data
    ports:
      - "8080:8080"
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    dns:
      - 8.8.8.8
      - 1.1.1.1
    extra_hosts:
      - "guce.yahoo.com:host-gateway"
      
  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    command: scheduler
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      # Scheduler performance tuning
      AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 300
      AIRFLOW__SCHEDULER__CATCHUP_BY_DEFAULT: 'False'
      # Database connection pool settings
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 5
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: 3600
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 10
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/data:/opt/airflow/data
    networks:
      - airflow-network
    dns:
      - 8.8.8.8
      - 1.1.1.1
    extra_hosts:
      - "guce.yahoo.com:host-gateway"

  # Airflow Worker
  airflow-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-worker
    command: celery worker
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      # Worker timeout settings untuk long-running tasks
      AIRFLOW__CELERY__WORKER_CONCURRENCY: 2
      AIRFLOW__CELERY__TASK_SOFT_TIME_LIMIT: 7200  # 2 hours
      AIRFLOW__CELERY__TASK_TIME_LIMIT: 7800      # 2.16 hours
      # Database connection pool settings
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_SIZE: 5
      AIRFLOW__DATABASE__SQL_ALCHEMY_POOL_RECYCLE: 3600
      AIRFLOW__DATABASE__SQL_ALCHEMY_MAX_OVERFLOW: 10
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/data:/opt/airflow/data
    networks:
      - airflow-network
    # Resource limits untuk stability
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    dns:
      - 8.8.8.8
      - 1.1.1.1
    extra_hosts:
      - "guce.yahoo.com:host-gateway"

  # Airflow Init untuk setup DB dan admin user
  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: airflow-init
    entrypoint: >
      /bin/bash -c "
      airflow db migrate &&
      airflow connections create-default-connections &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true
      "
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: 'z3BMGxVHz2tJq64TyW5guXw_T3OgMFTdQ9v_3XnZiwE='
      AIRFLOW__WEBSERVER__SECRET_KEY: 'f3b1a2c5d8e7f94b6c3a9d1e7f8b0c3d'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - airflow-network
    dns:
      - 8.8.8.8
      - 1.1.1.1
    extra_hosts:
      - "guce.yahoo.com:host-gateway"

  # MongoDB service untuk penyimpanan data
  mongodb:
    image: mongo:latest
    container_name: mongodb-external
    restart: always
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - airflow-network
    # MongoDB performance tuning
    command: mongod --wiredTigerCacheSizeGB 0.5

  # API Flask server
  api-server:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api-server
    ports:
      - "5000:5000"
    volumes:
      - ./api:/opt/api
    restart: unless-stopped
    networks:
      - airflow-network

  # Laravel aplikasi
  laravel-app:
    build:
      context: ./laravel
      dockerfile: Dockerfile
    container_name: laravel-app
    ports:
      - "8081:80"
    volumes:
      - ./laravel:/var/www/html
    restart: unless-stopped
    networks:
      - airflow-network

volumes:
  postgres-db-volume:
  mongo-data:

networks:
  airflow-network:
    driver: bridge